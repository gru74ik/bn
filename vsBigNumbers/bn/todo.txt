1. 	in file BigNumber.cpp in function member BigNumber::pop_front_extra_zeros()
	DONE: для BigFloat заменить граничащее условие окончания цикла
	
2. 	in file BigInt.cpp in function member BigInt::is_greater_than_zero() const
	DONE: check there are no leading zeros
	
3. 	in file BigInt.cpp in function member BigInt::is_zero() const
	DONE: check there are no leading zeros
	
4. 	in file BigNumber.cpp in function member size_t leading_zeros() const
	DONE: implement this function member
	
5.	in file BigInt.h in section comparison operators
	DONE: to fix implementation (implement it right)
	
6.	in file BigInt.h in section arithmetic operators
	TODO: to fix implementation (implement it right)

7.	in file BigInt.cpp
	DONE: implement copy ctor

8. 	in file BigNumber.h in function member void pop_front_extra_zeros();
	DOESN'T MATTER ANYMORE: implement for BigFloat his own version

9. in file BigNumber.h in function member size_t leading_zeros() const;
	DOESN'T MATTER ANYMORE: implement for BigFloat his own version

10. in file BigNumber.h in function member reset()
	DONE: implement for BigFloat his own version

11. in file BigFloat.h in function virtual bool is_correct() const {}
	DOESN'T MATTER ANYMORE: decide what to do with this function

12. in file BigNumber.cpp in function pop_front_extra_zeros()
	DONE: find out why zeros discards not right (why some zeros left)

13. in file BigFloat.cpp in function void BigFloat::convert_to(Notation notation)
	DONE: сheck out how exactly pop_front_extra_zeros() removes leading zeros

14. in file BigFloat.cpp in ctors and setters
	TODO: сheck out if they works properly

15. BigFloat total testing:
	TODO: сheck out if all functions calling by constructors works properly

	Default ctor BigFloat::BigFloat():
			void BigFloat::set_number(const std::string& num);

	Ctor BigFloat::BigFloat(const std::string& num):
			BigFloat::set_number(const std::string& num);
			BigFloat::is_correct(Notation notation) const;

			BigFloat::convert_to(SCIENTIFIC):
				BigNumber::get_number() const;
				BigFloat::dot_position() const;
				BigFloat::e_position() const;
				BigFloat::e_value_as_number() const;
				BigNumber::position_before(size_t pos)
				BigFloat::move_floating_point(LEFT, arg);
				BigFloat::set_number(const std::string& num);
				::number_to_string(size_t number);
				BigNumber::leading_zeros() const;
				move_floating_point(RIGHT, arg)
				BigFloat::pop_front_extra_zeros();
				BigNumber::push_back_elem(const std::string & str)
				BigFloat::pop_back_extra_zeros();

			BigFloat::convert_to(DECIMAL):
				BigFloat::e_sign();
				move_floating_point(RIGHT, arg);
				BigNumber::erase_elem(first, last);



			void BigFloat::reset()