1. 	in file BigNumber.cpp in function member BigNumber::pop_front_extra_zeros()
	DONE: äëÿ BigFloat çàìåíèòü ãðàíè÷àùåå óñëîâèå îêîí÷àíèÿ öèêëà
	
2. 	in file BigInt.cpp in function member BigInt::is_greater_than_zero() const
	DONE: check there are no leading zeros
	
3. 	in file BigInt.cpp in function member BigInt::is_zero() const
	DONE: check there are no leading zeros
	
4. 	in file BigNumber.cpp in function member size_t leading_zeros() const
	DONE: implement this function member
	
5.	in file BigInt.h in section comparison operators
	DONE: to fix implementation (implement it right)
	
6.	in file BigInt.h in section arithmetic operators
	TODO: to fix implementation (implement it right)

7.	in file BigInt.cpp
	DONE: implement copy ctor

8. 	in file BigNumber.h in function member void pop_front_extra_zeros();
	DOESN'T MATTER ANYMORE: implement for BigFloat his own version

9. in file BigNumber.h in function member size_t leading_zeros() const;
	DOESN'T MATTER ANYMORE: implement for BigFloat his own version

10. in file BigNumber.h in function member reset()
	DONE: implement for BigFloat his own version

11. in file BigFloat.h in function virtual bool is_correct() const {}
	DOESN'T MATTER ANYMORE: decide what to do with this function

12. in file BigNumber.cpp in function pop_front_extra_zeros()
	DONE: find out why zeros discards not right (why some zeros left)

13. in file BigFloat.cpp in function void BigFloat::convert_to(Notation notation)
	DONE: check out how exactly pop_front_extra_zeros() removes leading zeros

14. in file BigFloat.cpp in ctors and setters
	DONE: check out if they works properly

15. BigFloat total testing:
	TODO:: check out if all functions calling by constructors works properly

16. BigFloat size_t BigFloat::extra_leading_zeros() const:
	TODO:: check out implementation (bugs)
