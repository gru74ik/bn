/*
Смоделировать операцию деления целого числа длиной до 30 десятичных цифр на
действительное число в форме (zn)m.n Е N, где суммарная длина мантиссы (m+n)
– до 30 значащих цифр, а величина порядка N – до 5 цифр.

Результат выдать в форме (zn)0.m1 Е N1.

Условные обозначения (zn) – знак числа N, N1 – величина порядка E – основание
числа. Запись числа (zn)0.m Е N соответствует следующей записи числа
N mzn 10 *. 0) ( . Например, число 2.5 можно записать в виде: +0.25 E+1.

Порядок выполнения работы:
1.  Определить структуру данных для хранения длинного числа.
2.  Предусмотреть ввод и вывод чисел обязательно в том формате, который указан
в задании.
3.  Разбивать число на составляющие при вводе нельзя (т.е. число должно
считываться сразу полностью).
4.  STL не пользоваться.
*/

#include "stdafx.h"
#include "BigInt.h"
#include "BigFloat.h"
#include "bn_functions.h"

int main()
{
/*
    BigFloat c("123.45");
    // число: 123.45
    // на выходе должно быть: +1.2347 Е+2
    std::cout
        << "c: "
        << c
        << "\n\n"
        ;
*/
/*
    BigFloat d("0.089");
    // число: 0.089
    // на выходе должно быть: +8.9 Е-2
    std::cout
        << "d: "
        << d
        << "\n\n"
        ;
*/
/*
    std::cout
        << "c + d = "
        << (c + d)
        << "\n\n"
        ;
*/
/*
    BigInt x("0000000000000000000000000000000000001984");
    BigInt y("02000");
    BigInt z("000000000000007770000000000999");
    x.insert_elem("777", 0);
    y.insert_elem('6', y.last_digit_position());
    z.insert_elem('4', z.get_number().size());

    std::cout
        << "\n\n"
        << "x: " << x << "\n\n"
        << "y: " << y << "\n\n"
        << "z: " << z << "\n\n"
        ;
*/
/*
    BigFloat x;
    BigFloat y;
    std::cout << "Enter two big floating point numbers one by one:\n";
    std::cin >> x >> y;
    std::cout << "x + y = " << (x + y) << "\n\n";
*/

    std::cout << "The number before all is: +1.23456 E+5\n\n";
    BigFloat a("+1.23456 E+5"); // 123456.0
    std::cout << a << "\n\n";

    return 0;
}
