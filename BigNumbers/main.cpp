/*
Смоделировать операцию деления целого числа длиной до 30 десятичных цифр на
действительное число в форме (zn)m.n Е N, где суммарная длина мантиссы (m+n)
– до 30 значащих цифр, а величина порядка N – до 5 цифр.

Результат выдать в форме (zn)0.m1 Е N1.

Условные обозначения (zn) – знак числа N, N1 – величина порядка E – основание
числа. Запись числа (zn)0.m Е N соответствует следующей записи числа
N mzn 10 *. 0) ( . Например, число 2.5 можно записать в виде: +0.25 E+1.

Порядок выполнения работы:
1.  Определить структуру данных для хранения длинного числа.
2.  Предусмотреть ввод и вывод чисел обязательно в том формате, который указан
    в задании.
3.  Разбивать число на составляющие при вводе нельзя (т.е. число должно
    считываться сразу полностью).
4.  STL не пользоваться.
*/

#include <iostream>
#include <string>
#include "BigFloatTester.h"
#include "bn_functions.h"

int main()
{
    //BigFloatTester tester;
    //tester.menu();

/*
    BigInt a("9988776655");
    BigInt b("1234567890");

    std::cout
        << "Two big integers (addition):\n"
        << "a = " << a << "\n"
        << "b = " << b << "\n"
        << "a + b = " << a + b << "\n\n"
        ;
*/

    BigFloat w("0.000012345");		// +1.2345 e-5
    BigFloat x("123456.789");       // +1.23456789 E+5

    BigFloat y("+5.6789 e-5");		// 0.000056789
    BigFloat z("+9.87654321 E+5");	// 987654.321

    std::cout
        << "Two big floats (addition):\n"
        << "w = " << w << "\n"
        << "x = " << x << "\n"
        << "w + x = " << w + x << "\n\n"
        ;

    std::cout
        << "Two big floats (addition):\n"
        << "y = " << y << "\n"
        << "z = " << z << "\n"
        << "y + z = " << y + z << "\n\n"
        ;

/*
    std::cout
        << "Two big floats (multiplication):\n"
        << "x = " << x << "\n"
        << "y = " << y << "\n"
        << "x * y = " << x * y << "\n\n"
        ;
*/
}
